// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebUI.Infrastructure.Persistence;

namespace WebUI.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200926232302_seedApps")]
    partial class seedApps
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "5fc28a96-ba09-4619-82e0-2577e26b4255",
                            Name = "Administrator",
                            NormalizedName = "Administrator"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "0057efd1-3fc2-4589-a6ec-75b6619b8aaa",
                            Name = "NormalUser",
                            NormalizedName = "NormalUser"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("WebUI.Entities.Application", b =>
                {
                    b.Property<int>("ApplicationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsRun")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("JobId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<int>("RequestIntervalAtMinute")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId");

                    b.HasIndex("UserId");

                    b.ToTable("Applications");

                    b.HasData(
                        new
                        {
                            ApplicationId = 2,
                            IsRun = false,
                            Name = "Google",
                            RequestIntervalAtMinute = 20,
                            Url = "https://www.google.com.tr",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 3,
                            IsRun = false,
                            Name = "Samsung",
                            RequestIntervalAtMinute = 10,
                            Url = "https://www.samsung.com/tr/",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 4,
                            IsRun = false,
                            Name = "Xiaomi",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.mi.com/tr/",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 5,
                            IsRun = false,
                            Name = "General Mobile",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.generalmobile.com/tr",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 6,
                            IsRun = false,
                            Name = "Oppo",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.oppo.com/tr/smartphones/?utm_source=google&utm_medium=search&utm_campaign=cn_alwayson&utm_content=ak%C4%B1ll%C4%B1%20telefonlar&gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-0hkFPTs743FUnXof9wRSt4fgPlzfWzBmlJHJTc6bUycU0UjtGgOgkaAugfEALw_wcB",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 7,
                            IsRun = false,
                            Name = "Vestel",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.vestel.com.tr/?gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-39gET4hChHg3TxYsrxCV97bFozXj-tS1BLXDo2NqVOyDT7Nnq4wEwaAutKEALw_wcB&gclsrc=aw.ds",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 8,
                            IsRun = false,
                            Name = "Huawei",
                            RequestIntervalAtMinute = 10,
                            Url = "https://e.huawei.com/tr/huaweiconnect2020?utm_source=google&utm_medium=cpc&utm_campaign=01MHQHQ2052ZZL&utm_content=General&utm_term=Huawei&gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-38oXMToS-y814N23FBg35Scr2JUmsbgBsdqYpZaNSVGkU-vO7scbkaArBAEALw_wcB",
                            UserId = "2"
                        },
                        new
                        {
                            ApplicationId = 9,
                            IsRun = false,
                            Name = "Google 2",
                            RequestIntervalAtMinute = 20,
                            Url = "https://www.google.com.tr",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 10,
                            IsRun = false,
                            Name = "Samsung 2",
                            RequestIntervalAtMinute = 10,
                            Url = "https://www.samsung.com/tr/",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 11,
                            IsRun = false,
                            Name = "Xiaomi 2",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.mi.com/tr/",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 12,
                            IsRun = false,
                            Name = "General Mobile 2",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.generalmobile.com/tr",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 13,
                            IsRun = false,
                            Name = "Oppo 2",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.oppo.com/tr/smartphones/?utm_source=google&utm_medium=search&utm_campaign=cn_alwayson&utm_content=ak%C4%B1ll%C4%B1%20telefonlar&gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-0hkFPTs743FUnXof9wRSt4fgPlzfWzBmlJHJTc6bUycU0UjtGgOgkaAugfEALw_wcB",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 14,
                            IsRun = false,
                            Name = "Vestel 2",
                            RequestIntervalAtMinute = 5,
                            Url = "https://www.vestel.com.tr/?gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-39gET4hChHg3TxYsrxCV97bFozXj-tS1BLXDo2NqVOyDT7Nnq4wEwaAutKEALw_wcB&gclsrc=aw.ds",
                            UserId = "3"
                        },
                        new
                        {
                            ApplicationId = 15,
                            IsRun = false,
                            Name = "Huawei 2",
                            RequestIntervalAtMinute = 10,
                            Url = "https://e.huawei.com/tr/huaweiconnect2020?utm_source=google&utm_medium=cpc&utm_campaign=01MHQHQ2052ZZL&utm_content=General&utm_term=Huawei&gclid=Cj0KCQjwzbv7BRDIARIsAM-A6-38oXMToS-y814N23FBg35Scr2JUmsbgBsdqYpZaNSVGkU-vO7scbkaArBAEALw_wcB",
                            UserId = "3"
                        });
                });

            modelBuilder.Entity("WebUI.Entities.ApplicationStatisticDaily", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ApplicationId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("SuccessRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalRequest")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.ToTable("ApplicationStatisticDailys");
                });

            modelBuilder.Entity("WebUI.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1de84b4b-69e4-462d-bf8b-bb09c4645603",
                            Email = "invicti@security.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAELYtlaLLaq0Dc99C9p27zAAhguwXYxeVA4X7C/57fknDYe0ZcYUxcZy+lvCYB1Xaxg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "838c521e-8830-4c7e-ab6f-2db601c97cb3",
                            TwoFactorEnabled = false,
                            UserName = "InvictiSecurityCorp"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "d16cc8b3-77a5-408a-9eb0-2d1e66912e04",
                            Email = "servetseker@security.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEJmOVrLirtSMnhHivpjgznXb427Sa6jBEvCfTLnCcQun7yjYzN1/1ugA+JGWFk4T8Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "622e1996-79c1-4c52-a541-4530a9baf9b2",
                            TwoFactorEnabled = false,
                            UserName = "ServetSeker"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9d65ab88-f652-49e7-ab69-b8d854991a8f",
                            Email = "serkanseker@security.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            PasswordHash = "AQAAAAEAACcQAAAAEBUsN29Xe0rCpbDQvucXTKFX4u5gm+kMug9DQG9s5cjpOh9zgcjjcUUbLBnSiGegNg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "da93b4fa-d0cf-4651-b2fd-431f6b73e905",
                            TwoFactorEnabled = false,
                            UserName = "SerkanSeker"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("WebUI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("WebUI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebUI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("WebUI.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WebUI.Entities.Application", b =>
                {
                    b.HasOne("WebUI.Entities.ApplicationUser", "User")
                        .WithMany("Applications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("WebUI.Entities.ApplicationStatisticDaily", b =>
                {
                    b.HasOne("WebUI.Entities.Application", "Application")
                        .WithMany("StatisticDaily")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
